---
alwaysApply: true
---

# Cursor Rules - MksDdn Forms Handler

Ты мой помощник в разработке программного обеспечения. Твоя основная задача - не только писать качественный код, но и тщательно документировать весь процесс разработки, позволяя мне отслеживать прогресс и контролировать результаты на каждом этапе.

## Документирование процесса

1. Документируй каждый значительный шаг в разработке в следующих файлах: 
   - /docs/tasktracker.md - статус выполнения задач с описанием
   - /docs/Diary.md - подробный дневник наблюдений
2. Формат записи в tasktracker.md: 

   ```markdown
   ## Задача: [Название задачи]
   - **Статус**: [Не начата/В процессе/Завершена]
   - **Описание**: [Детальное описание]
   - **Шаги выполнения**:
     - [x] Завершенный шаг
     - [ ] Текущий шаг
     - [ ] Запланированный шаг
   - **Зависимости**: [Связи с другими задачами]
   ```

## Основные принципы работы

### 1. Архитектурные решения
- **Следуй SOLID принципам** - Single Responsibility, Open/Closed, Liskov Substitution, Interface Segregation, Dependency Inversion
- **Используй DRY** - Don't Repeat Yourself
- **Придерживайся KISS** - Keep It Simple, Stupid
- **Соблюдай WordPress Coding Standards**

### 2. Безопасность
- **Всегда валидируй входные данные**
- **Санитизируй данные перед выводом**
- **Используй nonce для форм**
- **Проверяй права доступа**
- **Ограничивай размер запросов**

### 3. Производительность
- **Минимизируй запросы к БД**
- **Используй кэширование где возможно**
- **Оптимизируй загрузку ресурсов**
- **Избегай N+1 проблем**

## Структура проекта

### Файловая структура
```
mksddn-forms-handler/
├── mksddn-forms-handler.php     # Главный файл плагина
├── includes/                     # Основные компоненты
├── handlers/                     # Обработчики внешних сервисов
├── templates/                    # Шаблоны
├── assets/                       # Статические ресурсы
├── languages/                    # Переводы
├── tests/                        # Тесты
└── docs/                         # Документация проекта
```

### Язык
Все комментарии в коде и инструкции внутри директории с плагином должны быть на английском языке.

### Наименование
- **Файлы классов**: `class-{component-name}.php`
- **Namespace**: `MksDdn\FormsHandler`
- **Константы**: `MKSDDN_FORMS_HANDLER_*`
- **Функции**: `mksddn_forms_handler_*`

## Процесс разработки

### 1. Планирование
- **Изучи требования** в `docs/Project.md`
- **Проверь текущий статус** в `docs/Tasktracker.md`
- **Задай вопросы** если что-то неясно
- **Предложи альтернативы** если есть несколько подходов

### 2. Реализация
- **Следуй архитектуре** из `docs/Project.md`
- **Пиши чистый код** без дублирования
- **Добавляй комментарии** для сложной логики
- **Тестируй изменения** перед коммитом

### 3. Документирование
- **Веди дневник** в `docs/Diary.md`
- **Отмечай прогресс** в `docs/Tasktracker.md`
- **Документируй API** если создаешь новые функции

### 4. Code Review
- **Проверяй безопасность** всех изменений
- **Тестируй производительность** критических участков
- **Проверяй совместимость** с WordPress
- **Убеждайся в читаемости** кода

## Стандарты кодирования

### PHP
- **Версия**: PHP 7.4+
- **Стандарты**: WordPress Coding Standards
- **Документирование**: PHPDoc для всех функций и классов
- **Обработка ошибок**: Используй try-catch и WordPress error handling

### JavaScript
- **Фреймворк**: jQuery (для совместимости)
- **Стандарты**: ESLint с WordPress rules
- **Модульность**: Используй IIFE для изоляции

### CSS
- **Префиксы**: Используй префиксы для WordPress
- **Организация**: BEM методология
- **Совместимость**: Поддержка старых браузеров

## Безопасность

### Валидация данных
```php
// Правильно
$email = sanitize_email($_POST['email']);
if (!is_email($email)) {
    wp_die('Invalid email');
}

// Неправильно
$email = $_POST['email'];
```

### Проверка прав
```php
// Правильно
if (!current_user_can('manage_options')) {
    wp_die('Insufficient permissions');
}

// Неправильно
// Отсутствие проверки прав
```

### Nonce проверки
```php
// Правильно
if (!wp_verify_nonce($_POST['_wpnonce'], 'form_submit')) {
    wp_die('Security check failed');
}

// Неправильно
// Отсутствие nonce проверки
   ```

## Производительность

### Оптимизация запросов
```php
// Правильно - один запрос
$forms = get_posts([
    'post_type' => 'mksddn_form',
    'numberposts' => -1,
    'meta_query' => [
        [
            'key' => 'status',
            'value' => 'active'
        ]
    ]
]);

// Неправильно - N+1 проблема
foreach ($form_ids as $id) {
    $form = get_post($id);
    $meta = get_post_meta($id, 'status');
}
```

### Кэширование
```php
// Правильно
$cached_data = wp_cache_get('forms_list');
if (false === $cached_data) {
    $cached_data = get_forms_data();
    wp_cache_set('forms_list', $cached_data, '', 3600);
}

// Неправильно
// Отсутствие кэширования
```

## Документирование кода и структуры

1. При создании нового файла добавляй в его начало: 

   ```php
   /**
    * @file: [имя файла]
    * @description: [краткое описание]
    * @dependencies: [связанные компоненты/файлы]
    * @created: [дата]
    */
   ```
2. После реализации нового функционала актуализируй `docs/project.md`, включая: 
   - Обновленную архитектуру проекта
   - Описание новых компонентов и их взаимодействий
   - При необходимости, диаграммы и схемы в формате Mermaid
3. Поддерживай актуальную документацию API и интерфейсов.

## Тестирование

### Unit тесты
- **Покрытие**: Минимум 80% для критических компонентов
- **Фреймворк**: PHPUnit
- **Структура**: `tests/` папка
- **Именование**: `test_{function_name}.php`

### Интеграционные тесты
- **WordPress тесты**: Используй WordPress Test Suite
- **API тесты**: Тестируй REST API endpoints
- **UI тесты**: Тестируй админ-интерфейс

## Документирование

### Комментарии в коде
```php
/**
 * Обрабатывает отправку формы
 *
 * @param array $form_data Данные формы
 * @param int   $form_id   ID формы
 * @return array Результат обработки
 * @throws Exception При ошибке обработки
 */
function process_form_submission($form_data, $form_id) {
    // Код функции
}
```

### Документация API
- **Описание функций**: Что делает функция
- **Параметры**: Типы и описание параметров
- **Возвращаемые значения**: Что возвращает функция
- **Примеры использования**: Практические примеры

## Совместимость

### WordPress версии
- **Минимальная**: WordPress 5.0+
- **Тестирование**: На всех поддерживаемых версиях
- **Обратная совместимость**: При обновлениях

### PHP версии
- **Минимальная**: PHP 7.4+
- **Рекомендуемая**: PHP 8.0+
- **Тестирование**: На всех поддерживаемых версиях

### Плагины
- **Популярные плагины**: WooCommerce, Contact Form 7, Yoast SEO
- **Конфликты**: Избегай конфликтов с другими плагинами
- **Хуки**: Используй уникальные префиксы для хуков

## Мониторинг и отладка

### Логирование
```php
// Правильно
error_log('Forms Handler: Form submission failed - ' . $error_message);

// Неправильно
// Отсутствие логирования
```

### Отладка
- **WP_DEBUG**: Используй для разработки
- **Логирование**: Веди логи ошибок
- **Мониторинг**: Отслеживай производительность

## Коммуникация

1. **Перед началом каждого нового шага** спрашивай моего подтверждения.
2. **После каждого шага** предоставляй краткое резюме изменений (не более 5 пунктов).
3. **При возникновении технических проблем** или неоднозначностей, предлагай 2-3 альтернативных подхода.
4. **Всегда сохраняй контекст** текущей задачи и общую цель проекта.
5. **Периодически напоминай** о текущем статусе задачи и оставшихся шагах.
6. **Следуй архитектурным решениям** и стандартам, описанным в Project.md.
7. **Соблюдай принципы** SOLID, KISS, DRY.
8. **Проводи code review** для всех изменений.
9. **Используй единый стиль** кодирования (линтеры, pre-commit hooks)
10. **Не оставляй неиспользуемый код** и комментарии.

## Заключение

При любых изменениях в проекте сначала актуализируй документацию, а затем приступай к следующему шагу разработки. Это позволит избежать потери контекста и обеспечит более последовательный и контролируемый процесс разработки.

Документация по созданию вордпресс плагинов: https://make.wordpress.org/plugins/